	Xvisor on BeagleBoard-xM (or OMAP3) using SD Booting 

This section of readme explains how to build & run Xvisor on real hardware 
BeagleBoard-xM using SD booting feature of OMAP3 SOC.

By default, Xvisor for BeagleBoard supports Realview-PB-A8 guest so we will
show how to run Basic Firmware (and/or Linux) on Realview-PB-A8 guest.

We need to add 2 images in boot partition of SD card that is shipped with
BeagleBoard-xM:
 1) U-Boot compatible Xvisor binary (uvmm.bin).
 2) Disk image containing guest binaries (disk.img).

Following steps to create these images and then boot Xvisor on Beagleboard-xM:

  [1. Build environment]
  # CROSS_COMPILE=arm-unknown-linux-gnueabi-

  [2. GoTo Xvisor source directory]
  # cd <xvisor_source_directory>

  [3. Configure Xvisor with Beagleboard (or OMAP3) host default settings]
  # make ARCH=arm omap3-beagle-defconfig

  [4. Build Xvisor, this creates vmm.bin]
  # make

  [5. Make U-Boot compatible uvmm.bin for use with bootm command]
  # mkimage -A arm -O linux -T kernel -C none -a 0x88000000 -e 0x88000000 -n Xvisor -d build/vmm.bin build/uvmm.bin

  [6. Build Basic Firmware for Realview-PB-A8 Guest, this creates firmware.bin.patched]
  # make -C tests/arm32/realview-pb-a8/basic
  
  [7. Create disk image for Xvisor]
  # mkdir -p ./build/disk/images/arm32/realview-pb-a8
  # cp -f ./build/tests/arm32/realview-pb-a8/basic/firmware.bin.patched ./build/disk/images/arm32/realview-pb-a8/firmware.bin
  # cp -f ./tests/arm32/realview-pb-a8/basic/nor_flash.list ./build/disk/images/arm32/realview-pb-a8/nor_flash.list
  # genext2fs -B 1024 -b 16384 -d ./build/disk ./build/disk.img
  OR
  # mkdir -p ./build/disk/images/arm32/realview-pb-a8
  # cp -f ./build/tests/arm32/realview-pb-a8/basic/firmware.bin.patched ./build/disk/images/arm32/realview-pb-a8/firmware.bin
  # cp -f ./tests/arm32/realview-pb-a8/linux/nor_flash.list ./build/disk/images/arm32/realview-pb-a8/nor_flash.list
  # cp -f ./tests/arm32/realview-pb-a8/linux/cmdlist ./build/disk/images/arm32/realview-pb-a8/cmdlist
  # cp -f <linux_build_directory>/arch/arm/boot/Image ./build/disk/images/arm32/realview-pb-a8/Image
  # cp -f <busybox_rootfs_directory>/rootfs.img ./build/disk/images/arm32/rootfs.img
  # genext2fs -B 1024 -b 16384 -d ./build/disk ./build/disk.img

  (Note: For creating <linux_build_directory>/arch/arm/boot/Image refer
   <xvisor_source_directory>/tests/arm32/realview-pb-a8/linux/README)
  (Note: For creating <busybox_rootfs_directory>/rootfs.img refer
   <xvisor_source_directory>/tests/arm32/common/busybox/README)

  [8. Unplug SD card from BeagleBoard-xM and plug it on your development machine]

  [9. Mount boot partition (or partition 0) of SD card on your development machine]

  [10. Copy uvmm.bin to boot partition of SD card]
  # cp -f build/uvmm.bin <path_to_mounted_boot_partition_of_sd_card>

  [11. Copy disk image to boot partition of SD card]
  # cp -f build/disk.img <path_to_mounted_boot_partition_of_sd_card>

  [12. Unmount boot partition (or partition 0) of SD card from your development machine]

  [13. Unplug SD card from your development machine and plug it back on BeagleBoard-xM]

  [14. Connect to serial port of BeagleBoard-xM using Putty or Minicom]

  [15. Power-up or Reset BeagleBoard-xM and press any key when U-Boot shows auto-boot count down]

  [16. Enabled MMC interface from U-Boot command line interface]
  OMAP3 beagleboard.org # mmc dev 0:0

  [17. Copy Xvisor from SD card to SDRAM]
  OMAP3 beagleboard.org # fatload mmc 0 0x80200000 uvmm.bin

  [18. Copy disk image from SD card to SDRAM]
  OMAP3 beagleboard.org # fatload mmc 0 0x89000000 disk.img

  [19. Jump into Xvisor after disabling MMU, interrupts, etc]
  OMAP3 beagleboard.org # bootm 0x80200000

  [20. Kick Guest0 for starting Basic Firmware]
  XVisor# guest kick guest0

  [21. Bind to virtual UART]
  XVisor# vserial bind guest0/uart0

  [22. Say 'hi' to Basic Firmware]
  [guest0/uart0] basic# hi

  (Note: If you had linux images loaded in guest NOR flash then
   instead of above step you can start booting linux,
   basic# autoexec)

  [23. Say 'hello' to Basic Firmware]
  [guest0/uart0] basic# hello

  [24. Check various commands of Basic Firmware]
  [guest0/uart0] basic# help

  [25. Enter character seqence 'ESCAPE+x+q" return to Xvisor prompt]
  [guest0/uart0] basic# 

  (Note: replace all <> brackets based on your workspace)


	Xvisor on Linaro QEMU BeagleBoard (or OMAP3) using NAND Booting 

This section of readme explains how to build & run Xvisor from nand-flash on
BeagleBoard emulated by QEMU Linaro. 

By default, Xvisor for BeagleBoard supports Realview-PB-A8 guest so we will
show how to run Basic Firmware (and/or Linux) on Realview-PB-A8 guest.

We need to have 4 images to create the nand-flash image:
 1) X-loader for OMAP3 (2nd stage bootloader for OMAP3).
 2) U-Boot binary for OMAP3 (3rd stage bootloader).
 3) U-Boot compatible Xvisor binary (uvmm.bin).
 4) Disk image containing guest binaries (disk.img).

The steps to create these images and boot Xvisor on Beagleboard QEMU are as
follows:

  [1. Build environment]
  # CROSS_COMPILE=arm-unknown-linux-gnueabi-

  (Note: Follow step 2 to get the prebuilt X-loader and U-Boot binaries, or 
   steps 3-4 to build those images from source)
  
  [2. Download X-loader and U-Boot binary]
  # wget http://qemu-omap3.googlecode.com/files/image-v0.01.tar.bz2
  # mkdir prebuilt-images/
  # tar -xvjf image-v0.01.tar.bz2 -C prebuilt-images/

  (Note: we would not need the uImage extracted in the above step)

  [3. Download and build X-loader from source - this creates x-load.bin.ift]
  # git clone git://gitorious.org/x-load-omap3/mainline.git
  # cd mainline
  # make omap3530beagle_config
  # make x-load.bin.ift
  # cd ..

  [4. Download and build U-Boot from source - this creates u-boot.bin]
  # git clone git://git.denx.de/u-boot.git
  # cd u-boot
  # make omap3_beagle_config
  # make omap3_beagle
  # cd ..

  [5. GoTo Xvisor source directory]
  # cd <xvisor_source_directory>

  [6. Configure Xvisor with Beagleboard (or OMAP3) host default settings]
  # make ARCH=arm omap3-beagle-defconfig

  [7. Build Xvisor, this creates vmm.bin]
  # make

  [8. Add uboot header to vmm.bin for use with bootm command]
  # mkimage -A arm -O linux -T kernel -C none -a 0x88000000 -e 0x88000000 -n Xvisor -d build/vmm.bin build/uvmm.bin

  [9. Build Basic Firmware for Realview-PB-A8 Guest, this creates firmware.bin.patched]
  # make -C tests/arm32/realview-pb-a8/basic

  [10. Copy the X-loader and U-Boot binaries (from step 2 or 3-4) into Xvisor build-directory]
  # cp <path-to-x-loader-binary>/x-load.bin.ift <path-to-u-boot-binary>/u-boot.bin build/

  [11. Create disk image for Xvisor]
  # mkdir -p ./build/disk/images/arm32/realview-pb-a8
  # cp -f ./build/tests/arm32/realview-pb-a8/basic/firmware.bin.patched ./build/disk/images/arm32/realview-pb-a8/firmware.bin
  # cp -f ./tests/arm32/realview-pb-a8/basic/nor_flash.list ./build/disk/images/arm32/realview-pb-a8/nor_flash.list
  # genext2fs -B 1024 -b 16384 -d ./build/disk ./build/disk.img
  OR
  # mkdir -p ./build/disk/images/arm32/realview-pb-a8
  # cp -f ./build/tests/arm32/realview-pb-a8/basic/firmware.bin.patched ./build/disk/images/arm32/realview-pb-a8/firmware.bin
  # cp -f ./tests/arm32/realview-pb-a8/linux/nor_flash.list ./build/disk/images/arm32/realview-pb-a8/nor_flash.list
  # cp -f ./tests/arm32/realview-pb-a8/linux/cmdlist ./build/disk/images/arm32/realview-pb-a8/cmdlist
  # cp -f <linux_build_directory>/arch/arm/boot/Image ./build/disk/images/arm32/realview-pb-a8/Image
  # cp -f <busybox_rootfs_directory>/rootfs.img ./build/disk/images/arm32/rootfs.img
  # genext2fs -B 1024 -b 16384 -d ./build/disk ./build/disk.img

  (Note: For creating <linux_build_directory>/arch/arm/boot/Image refer
   <xvisor_source_directory>/tests/arm32/realview-pb-a8/linux/README)
  (Note: For creating <busybox_rootfs_directory>/rootfs.img refer
   <xvisor_source_directory>/tests/arm32/common/busybox/README)

  [12. Create a flat binary with all our binaries appended]
  # ./tools/scripts/memimg.py -a 0 -o build/beagle.img build/x-load.bin.ift@0x0 build/u-boot.bin@0x80000 build/uvmm.bin@0x280000 build/disk.img@0x380000

  [13. Build the beagleboard nand-flash image from the flat binary created]
  # ./tools/bbflash/bb_nandflash.sh build/beagle.img build/beagle-nand.bin ./build/tools/bbflash/bb_nandflash_ecc 

  [14. Launch QEMU Linaro]
  # qemu-system-arm -M beagle -m 256M -drive file=build/beagle-nand.bin,if=mtd -display none -serial stdio -s

  [15. Copy Xvisor from nand-flash to SDRAM]
  OMAP3 beagleboard.org # nand read 0x80200000 0x280000 0x100000

  [16. Copy disk image from nand-flash to SDRAM]
  OMAP3 beagleboard.org # nand read 0x89000000 0x380000 0x1000000

  [17. Jump into Xvisor after disabling MMU, interrupts, etc]
  OMAP3 beagleboard.org # bootm 0x80200000

  [18. Kick Guest0 for starting Basic Firmware]
  XVisor# guest kick guest0

  [19. Bind to virtual UART]
  XVisor# vserial bind guest0/uart0

  [20. Say 'hi' to Basic Firmware]
  [guest0/uart0] basic# hi

  (Note: If you had linux images loaded in guest NOR flash then
   instead of above step you can start booting linux,
   basic# autoexec)

  [21. Say 'hello' to Basic Firmware]
  [guest0/uart0] basic# hello

  [22. Check various commands of Basic Firmware]
  [guest0/uart0] basic# help

  [23. Enter character seqence 'ESCAPE+x+q" return to Xvisor prompt]
  [guest0/uart0] basic# 

  (Note: replace all <> brackets based on your workspace)

